/* The following code was generated by JFlex 1.4.3 on 02/11/16 22:14 */

package analisador_lexico;

import static analisador_lexico.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 02/11/16 22:14 from the specification file
 * <tt>F:/Compilador/src/analisador_lexico/Regras.flex</tt>
 */
class Lexemas {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\63\1\63\2\0\1\63\22\0\1\63\1\55\1\64\2\0"+
    "\1\51\1\56\1\64\1\60\1\61\1\51\1\47\1\0\1\50\1\0"+
    "\1\51\12\2\1\0\1\62\1\54\1\52\1\53\2\0\1\22\1\32"+
    "\1\34\1\1\1\24\1\45\2\1\1\27\3\1\1\36\1\40\1\31"+
    "\1\43\2\1\1\33\1\37\1\46\5\1\4\0\1\1\1\0\1\17"+
    "\1\44\1\16\1\30\1\12\1\7\1\35\1\11\1\6\2\1\1\5"+
    "\1\23\1\3\1\21\1\26\1\1\1\14\1\20\1\13\1\4\1\41"+
    "\1\10\1\25\1\15\1\42\1\62\1\57\1\62\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\20\2\3\4\1\5\2\6"+
    "\3\7\2\10\1\11\1\12\2\2\1\13\27\2\1\5"+
    "\1\6\1\7\1\0\1\2\1\14\33\2\1\0\1\2"+
    "\1\15\23\2\1\3\35\2\1\14\63\2\1\16\112\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u04c3\0\u0562\0\u0597\0\u05cc\0\65\0\65"+
    "\0\65\0\u0601\0\u0636\0\152\0\u066b\0\u06a0\0\u06d5\0\u070a"+
    "\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2"+
    "\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a"+
    "\0\u0a8f\0\u0ac4\0\u0af9\0\65\0\65\0\65\0\u0b2e\0\u0b63"+
    "\0\152\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\152\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341"+
    "\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9"+
    "\0\u151e\0\u1553\0\65\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c"+
    "\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804"+
    "\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54"+
    "\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc"+
    "\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4"+
    "\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c"+
    "\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4"+
    "\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c"+
    "\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544"+
    "\0\u2579\0\u25ae\0\u25e3\0\u2618\0\152\0\u264d\0\u2682\0\u26b7"+
    "\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f"+
    "\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07"+
    "\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u2baf"+
    "\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57"+
    "\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff"+
    "\0\u2f34\0\u2f69\0\u2f9e\0\u2fd3\0\u3008\0\u303d\0\u3072\0\u30a7"+
    "\0\u30dc\0\u3111\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u324f"+
    "\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2\0\u33f7"+
    "\0\u342c\0\u3461\0\u3496\0\u34cb\0\u3500\0\u3535\0\u356a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\3\1\6\1\7\1\10"+
    "\1\3\1\11\1\12\2\3\1\13\3\3\1\14\1\3"+
    "\1\15\2\3\1\16\1\17\2\3\1\20\1\21\3\3"+
    "\1\22\3\3\1\23\1\3\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\2\37"+
    "\1\40\1\41\66\0\46\3\20\0\1\4\63\0\3\3"+
    "\1\42\42\3\17\0\2\3\1\43\3\3\1\44\37\3"+
    "\17\0\4\3\1\45\1\46\10\3\1\47\1\3\1\50"+
    "\25\3\17\0\10\3\1\51\35\3\17\0\2\3\1\52"+
    "\1\3\1\53\41\3\17\0\13\3\1\54\32\3\17\0"+
    "\10\3\1\55\5\3\1\56\27\3\17\0\13\3\1\57"+
    "\32\3\17\0\24\3\1\60\21\3\17\0\2\3\1\61"+
    "\1\3\1\62\41\3\17\0\20\3\1\63\25\3\17\0"+
    "\11\3\1\64\1\65\33\3\17\0\4\3\1\66\41\3"+
    "\17\0\3\3\1\67\5\3\1\70\6\3\1\71\25\3"+
    "\17\0\20\3\1\72\25\3\17\0\2\3\1\73\43\3"+
    "\65\0\1\74\2\0\1\74\62\0\1\74\1\0\1\74"+
    "\64\0\1\74\64\0\1\75\64\0\2\75\63\0\1\75"+
    "\1\0\1\75\66\0\1\76\65\0\1\76\55\0\1\77"+
    "\15\0\4\3\1\100\41\3\17\0\12\3\1\101\33\3"+
    "\17\0\20\3\1\102\25\3\17\0\2\3\1\103\43\3"+
    "\17\0\4\3\1\104\41\3\17\0\13\3\1\44\32\3"+
    "\17\0\5\3\1\105\40\3\17\0\3\3\1\106\42\3"+
    "\17\0\17\3\1\107\26\3\17\0\3\3\1\110\10\3"+
    "\1\44\31\3\17\0\16\3\1\111\27\3\17\0\12\3"+
    "\1\112\33\3\17\0\5\3\1\113\5\3\1\114\32\3"+
    "\17\0\15\3\1\115\30\3\17\0\12\3\1\116\4\3"+
    "\1\117\7\3\1\120\16\3\17\0\4\3\1\121\41\3"+
    "\17\0\3\3\1\122\42\3\17\0\15\3\1\123\30\3"+
    "\17\0\13\3\1\124\32\3\17\0\16\3\1\125\1\3"+
    "\1\126\25\3\17\0\4\3\1\127\15\3\1\130\23\3"+
    "\17\0\34\3\1\131\11\3\17\0\32\3\1\132\13\3"+
    "\17\0\20\3\1\133\25\3\17\0\17\3\1\134\26\3"+
    "\20\0\1\135\63\0\4\3\1\44\41\3\17\0\16\3"+
    "\1\43\27\3\17\0\16\3\1\136\27\3\17\0\17\3"+
    "\1\110\26\3\17\0\4\3\1\107\41\3\17\0\22\3"+
    "\1\101\23\3\17\0\11\3\1\44\34\3\17\0\11\3"+
    "\1\137\34\3\17\0\13\3\1\101\32\3\17\0\15\3"+
    "\1\140\30\3\17\0\12\3\1\141\33\3\17\0\16\3"+
    "\1\142\27\3\17\0\11\3\1\143\34\3\17\0\11\3"+
    "\1\144\34\3\17\0\12\3\1\145\33\3\17\0\11\3"+
    "\1\146\34\3\17\0\11\3\1\147\34\3\17\0\43\3"+
    "\1\150\2\3\17\0\3\3\1\151\42\3\17\0\5\3"+
    "\1\152\40\3\17\0\17\3\1\153\26\3\17\0\2\3"+
    "\1\154\43\3\17\0\4\3\1\155\41\3\17\0\43\3"+
    "\1\156\2\3\17\0\16\3\1\157\27\3\17\0\3\3"+
    "\1\160\42\3\17\0\4\3\1\161\41\3\17\0\3\3"+
    "\1\162\42\3\20\0\1\135\56\0\1\163\4\0\4\3"+
    "\1\164\41\3\17\0\10\3\1\44\35\3\17\0\10\3"+
    "\1\165\35\3\17\0\14\3\1\166\31\3\17\0\25\3"+
    "\1\167\20\3\17\0\13\3\1\170\32\3\17\0\16\3"+
    "\1\171\27\3\17\0\24\3\1\172\21\3\17\0\34\3"+
    "\1\173\11\3\17\0\4\3\1\174\41\3\17\0\13\3"+
    "\1\175\32\3\17\0\2\3\1\176\43\3\17\0\17\3"+
    "\1\177\26\3\17\0\11\3\1\200\34\3\17\0\42\3"+
    "\1\201\3\3\17\0\11\3\1\202\34\3\17\0\12\3"+
    "\1\203\33\3\17\0\15\3\1\204\30\3\17\0\11\3"+
    "\1\205\34\3\17\0\25\3\1\206\20\3\17\0\4\3"+
    "\1\207\41\3\17\0\22\3\1\210\23\3\17\0\26\3"+
    "\1\211\3\3\1\212\13\3\17\0\12\3\1\213\33\3"+
    "\17\0\13\3\1\214\32\3\17\0\2\3\1\215\43\3"+
    "\17\0\30\3\1\216\15\3\17\0\16\3\1\217\27\3"+
    "\17\0\11\3\1\101\34\3\17\0\5\3\1\220\40\3"+
    "\17\0\34\3\1\221\11\3\17\0\33\3\1\222\3\3"+
    "\1\223\6\3\17\0\37\3\1\224\6\3\17\0\20\3"+
    "\1\225\25\3\17\0\13\3\1\226\32\3\17\0\5\3"+
    "\1\227\40\3\17\0\10\3\1\230\35\3\17\0\16\3"+
    "\1\231\27\3\17\0\25\3\1\232\20\3\17\0\14\3"+
    "\1\44\31\3\17\0\11\3\1\233\34\3\17\0\2\3"+
    "\1\234\43\3\17\0\12\3\1\235\33\3\17\0\5\3"+
    "\1\236\40\3\17\0\3\3\1\237\42\3\17\0\12\3"+
    "\1\240\33\3\17\0\3\3\1\241\42\3\17\0\4\3"+
    "\1\242\41\3\17\0\12\3\1\243\33\3\17\0\26\3"+
    "\1\244\17\3\17\0\16\3\1\245\27\3\17\0\20\3"+
    "\1\246\25\3\17\0\20\3\1\247\25\3\17\0\5\3"+
    "\1\250\40\3\17\0\44\3\1\251\1\3\17\0\40\3"+
    "\1\252\5\3\17\0\35\3\1\253\6\3\1\254\1\3"+
    "\17\0\2\3\1\101\43\3\17\0\20\3\1\255\25\3"+
    "\17\0\12\3\1\256\33\3\17\0\27\3\1\120\16\3"+
    "\17\0\20\3\1\257\25\3\17\0\20\3\1\260\25\3"+
    "\17\0\25\3\1\261\20\3\17\0\5\3\1\262\40\3"+
    "\17\0\12\3\1\263\33\3\17\0\21\3\1\264\10\3"+
    "\1\265\2\3\1\266\1\267\7\3\17\0\14\3\1\270"+
    "\31\3\17\0\2\3\1\271\43\3\17\0\17\3\1\272"+
    "\26\3\17\0\12\3\1\273\33\3\17\0\12\3\1\274"+
    "\33\3\17\0\2\3\1\275\43\3\17\0\20\3\1\276"+
    "\25\3\17\0\11\3\1\277\34\3\17\0\11\3\1\300"+
    "\34\3\17\0\5\3\1\301\40\3\17\0\13\3\1\302"+
    "\32\3\17\0\5\3\1\303\40\3\17\0\13\3\1\304"+
    "\32\3\17\0\2\3\1\305\43\3\17\0\12\3\1\306"+
    "\33\3\17\0\16\3\1\307\27\3\17\0\30\3\1\310"+
    "\15\3\17\0\13\3\1\311\1\3\1\312\30\3\17\0"+
    "\12\3\1\313\33\3\17\0\20\3\1\314\25\3\17\0"+
    "\10\3\1\315\35\3\17\0\23\3\1\15\22\3\17\0"+
    "\27\3\1\316\16\3\17\0\12\3\1\270\33\3\17\0"+
    "\44\3\1\317\1\3\17\0\32\3\1\320\13\3\17\0"+
    "\12\3\1\321\33\3\17\0\13\3\1\322\32\3\17\0"+
    "\21\3\1\323\24\3\17\0\12\3\1\324\33\3\17\0"+
    "\11\3\1\325\34\3\17\0\12\3\1\326\33\3\17\0"+
    "\15\3\1\270\30\3\17\0\11\3\1\270\34\3\17\0"+
    "\11\3\1\327\34\3\17\0\12\3\1\330\33\3\17\0"+
    "\6\3\1\331\37\3\17\0\34\3\1\332\11\3\17\0"+
    "\15\3\1\333\30\3\17\0\16\3\1\334\27\3\17\0"+
    "\2\3\1\335\43\3\17\0\13\3\1\336\32\3\17\0"+
    "\11\3\1\337\34\3\17\0\20\3\1\340\25\3\17\0"+
    "\3\3\1\341\42\3\17\0\11\3\1\342\34\3\17\0"+
    "\22\3\1\343\23\3\17\0\13\3\1\344\32\3\17\0"+
    "\10\3\1\345\35\3\17\0\4\3\1\327\41\3\17\0"+
    "\11\3\1\346\34\3\17\0\27\3\1\270\16\3\17\0"+
    "\5\3\1\347\40\3\17\0\31\3\1\350\14\3\17\0"+
    "\3\3\1\351\42\3\17\0\11\3\1\352\34\3\17\0"+
    "\12\3\1\304\33\3\17\0\5\3\1\353\40\3\17\0"+
    "\11\3\1\354\34\3\17\0\24\3\1\355\21\3\17\0"+
    "\3\3\1\356\42\3\17\0\25\3\1\357\20\3\17\0"+
    "\13\3\1\270\32\3\17\0\16\3\1\272\27\3\17\0"+
    "\13\3\1\360\32\3\17\0\20\3\1\327\25\3\17\0"+
    "\27\3\1\361\16\3\17\0\20\3\1\362\25\3\17\0"+
    "\20\3\1\363\25\3\17\0\22\3\1\364\23\3\17\0"+
    "\17\3\1\365\26\3\17\0\12\3\1\366\33\3\17\0"+
    "\16\3\1\367\27\3\17\0\30\3\1\370\15\3\17\0"+
    "\2\3\1\327\43\3\17\0\25\3\1\371\20\3\17\0"+
    "\16\3\1\372\27\3\17\0\30\3\1\373\15\3\17\0"+
    "\2\3\1\270\43\3\17\0\3\3\1\374\42\3\17\0"+
    "\11\3\1\375\34\3\17\0\17\3\1\270\26\3\17\0"+
    "\20\3\1\376\25\3\17\0\27\3\1\377\16\3\17\0"+
    "\3\3\1\u0100\42\3\17\0\20\3\1\u0101\25\3\17\0"+
    "\14\3\1\u0102\31\3\17\0\25\3\1\u0103\20\3\17\0"+
    "\2\3\1\u0104\43\3\17\0\2\3\1\272\43\3\17\0"+
    "\13\3\1\377\32\3\17\0\32\3\1\265\13\3\17\0"+
    "\12\3\1\u0105\33\3\17\0\13\3\1\261\32\3\17\0"+
    "\32\3\1\u0106\13\3\17\0\11\3\1\u0107\34\3\17\0"+
    "\27\3\1\365\16\3\17\0\30\3\1\u0108\15\3\17\0"+
    "\5\3\1\u0109\40\3\17\0\13\3\1\262\32\3\17\0"+
    "\6\3\1\u010a\37\3\17\0\41\3\1\304\4\3\17\0"+
    "\31\3\1\u010b\14\3\17\0\20\3\1\u010c\25\3\17\0"+
    "\3\3\1\u010d\42\3\17\0\2\3\1\u010e\43\3\17\0"+
    "\27\3\1\u010f\16\3\17\0\17\3\1\305\26\3\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13727];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\3\11\32\1\3\11\1\0\35\1"+
    "\1\0\25\1\1\11\234\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexema;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexemas(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexemas(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { lexema = yytext(); return SEPARADOR;
          }
        case 15: break;
        case 14: 
          { lexema = yytext(); return EXCECAO;
          }
        case 16: break;
        case 5: 
          { lexema = yytext(); return OPERADOR_ATRIBUICAO;
          }
        case 17: break;
        case 2: 
          { lexema=yytext(); return ID;
          }
        case 18: break;
        case 1: 
          { return ERROR;
          }
        case 19: break;
        case 7: 
          { lexema = yytext(); return OPERADOR_LOGICO;
          }
        case 20: break;
        case 3: 
          { lexema=yytext(); return NUMERO;
          }
        case 21: break;
        case 4: 
          { lexema = yytext(); return OPERADOR_ARITMETICO;
          }
        case 22: break;
        case 10: 
          { lexema = yytext(); return ;
          }
        case 23: break;
        case 12: 
          { lexema = yytext(); return TIPO;
          }
        case 24: break;
        case 11: 
          { lexema = yytext(); return RESERVADO;
          }
        case 25: break;
        case 6: 
          { lexema = yytext(); return OPERADOR_RELACIONAL;
          }
        case 26: break;
        case 13: 
          { lexema = yytext(); return OPERADOR_BOOLEANO;
          }
        case 27: break;
        case 9: 
          { 
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
